unit uLogin;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, Buttons, jpeg, DB, ADODB, cxGraphics, cxControls,
  cxLookAndFeels, cxLookAndFeelPainters, cxContainer, cxEdit, dxSkinsCore,
  dxSkinBlack, dxSkinBlue, dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom,
  dxSkinDarkSide, dxSkinFoggy, dxSkinGlassOceans, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMoneyTwins,
  dxSkinOffice2007Black, dxSkinOffice2007Blue, dxSkinOffice2007Green,
  dxSkinOffice2007Pink, dxSkinOffice2007Silver, dxSkinPumpkin, dxSkinSeven,
  dxSkinSharp, dxSkinSilver, dxSkinSpringTime, dxSkinStardust, dxSkinSummer2008,
  dxSkinsDefaultPainters, dxSkinValentine, dxSkinXmas2008Blue, cxTextEdit,
  cxMaskEdit, cxDropDownEdit, Menus, cxButtons, cxLabel, IdBaseComponent,
  IdComponent, IdTCPConnection, IdTCPClient, IdExplicitTLSClientServerBase,
  IdFTP, uVersionList, ComCtrls, Registry;

type
  TfrmLogin = class(TForm)
    Image1: TImage;
    btnConfig: TSpeedButton;
    Timer1: TTimer;
    cboHospitals: TcxComboBox;
    txtUserID: TcxTextEdit;
    txtPassword: TcxTextEdit;
    btnLogin: TcxButton;
    btnClose: TcxButton;
    lblExp: TLabel;
    cxLabel6: TcxLabel;
    cxLabel1: TcxLabel;
    cxLabel2: TcxLabel;
    IdFTP: TIdFTP;
    TimerEvent: TTimer;
    ProgressBar: TProgressBar;
    ADOStoredProc: TADOStoredProc;
    btnUpdate: TSpeedButton;
    procedure btnConfigClick(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure FormShow(Sender: TObject);
    function isValidInput: Boolean;
    procedure txtPasswordKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure txtUserIDKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure btnLoginClick(Sender: TObject);
    procedure TimerEventTimer(Sender: TObject);
    procedure IdFTPAfterClientLogin(Sender: TObject);
    procedure IdFTPWork(ASender: TObject; AWorkMode: TWorkMode;
      AWorkCount: Int64);
    procedure btnUpdateClick(Sender: TObject);
  private
    { Private declarations }
    FVersionList: TVersionList;
    function LoadingConfiguration: Boolean;
//    function SetUpdateDB: Boolean;
    function SetSocialWorkDB: Boolean;
//    function GetUpdater: Boolean;
    procedure OutExp(sMsg: string);
    function SetFTPServer: Boolean;
    function DoUpdate: Boolean;
    procedure DownLoadNewVersion(bGoing: Boolean=False);
  public
    { Public declarations }
  end;

var
  frmLogin: TfrmLogin;

implementation
uses uConfig, uDB, uGlobal, uSetup, uQuery;
{$R *.dfm}

procedure TfrmLogin.btnConfigClick(Sender: TObject);
begin
  if frmSetup.ShowModal = mrOK then
  while true do
  begin
    if not LoadingConfiguration then
    begin
      if frmSetup.ShowModal <> mrOK then
      begin
        Application.Terminate;
        break;
      end;
    end
    else
      break;
  end;
end;

procedure TfrmLogin.btnLoginClick(Sender: TObject);
var
  sHospitalName, sUserID, sPassword: string;
begin
  if not isValidInput then
  begin
    oGlobal.Msg('아이디와 암호를 입력해 주십시오!');
    Exit;
  end;

  sHospitalName := trim(cboHospitals.Text);
  sUserID := trim(txtUserID.Text);
  sPassword := trim(txtPassword.Text);

  if dbMain.isValidUser(sHospitalName, sUserID, sPassword) then
  begin
    oConfig.User.HospitalName := sHospitalName;
    oConfig.SaveServerConfiguration(oConfig.SWServer, oConfig.FTPServer);

// disable SaveLog Procedure
//    adoStoredProc.Close;
//    adoStoredProc.Parameters.ParamByName('@HospitalID').Value := oConfig.User.HospitalID;
//    adoStoredProc.Parameters.ParamByName('@UserID').Value := oConfig.User.UserID;
//    adoStoredProc.ExecProc;

    ModalResult := mrOK;
  end
  else
    oGlobal.Msg('아이디 혹은 암호가 잘못 입력되었습니다!');
end;

procedure TfrmLogin.btnUpdateClick(Sender: TObject);
begin
  if oGlobal.YesNo('다운로드 하시겠습니까?') = mrYes then
    DownLoadNewVersion(True);
end;

function TfrmLogin.DoUpdate: Boolean;
  function NeedDownload(ftpModify, curModify, FileName: string): Boolean;
  begin
    if not FVersionList.FileExists(FileName) then
      result := False
    else
      result := oGlobal.isNullStr(ftpModify) or oGlobal.isNullStr(curModify) or
        (ftpModify <> curModify) or (not FileExists(oConfig.CurDir + FileName));
  end;
var
  r: TRegistry;
begin
  result := False;

  r := TRegistry.Create;
  r.RootKey := HKEY_CURRENT_USER;

  if not r.OpenKey(cRegKey + 'update', true) then
  begin
    oGlobal.Msg('레지스트리 정보를 읽어올 수 없습니다!');
    Exit;
  end;

  TimerEvent.Enabled := False;
  while IdFTP.Tag = FTP_LOGIN_FAIL do
    Application.ProcessMessages;

  OutExp('Updater를 다운받고 있습니다!');
  try
    if NeedDownload(FVersionList.Modifies(cUpdaterFileName), r.ReadString
        (cUpdaterFileName), cUpdaterFileName) then
    begin
      ProgressBar.Max := FVersionList.Sizes(cUpdaterFileName);
      ProgressBar.Visible := true;
      try
        IdFTP.Get(cUpdaterFileName, oConfig.CurDir + cUpdaterFileName, true);
        r.WriteString(cUpdaterFileName, FVersionList.Modifies(cUpdaterFileName)
          );
      except
        ProgressBar.Visible := False;
        DeleteFile(oConfig.CurDir + cUpdaterFileName);
        raise ;
      end;
      ProgressBar.Visible := False;
    end;
  except
    r.CloseKey;
    r.Free;
    oGlobal.Msg('Updater다운로드에 실패했습니다!');
    Exit;
  end;

  OutExp('업데이트 정보를 확인하고 있습니다!');
  try
    if NeedDownload(FVersionList.Modifies(oConfig.AppFileName), r.ReadString
        (oConfig.AppFileName), oConfig.AppFileName) then
    begin
      if oGlobal.YesNo('다른 버전이 있습니다! 다운 받으시겠습니까?') = mrYes then
        DownLoadNewVersion;
    end;

    result := true;
  except
    oGlobal.Msg('업데이트 하지 못했습니다!');
  end;

  r.CloseKey;
  r.Free;
end;

procedure TfrmLogin.DownLoadNewVersion(bGoing: Boolean);
var
  si: TSTARTUPINFO;
  pi: TPROCESSINFORMATION;
  sFileName: string;
  CmdLine: array [0 .. 512] of char;
  sGoing: string;
begin
  FillChar(si, Sizeof(si), #0);
  si.cb := Sizeof(si);
  sFileName := oConfig.CurDir + cUpdaterFileName;

  if bGoing then
    sGoing := ' Going'
  else
    sGoing := ' NotGoing';

  // Parameter = HOST PORT USERNAME PASSWORD REGKEY DIR RUNFILENAME
  StrPCopy(CmdLine, sFileName + ' ' + oConfig.FTPServer.Host + ' ' +
      inttostr(cPORT) + ' ' + oConfig.FTPServer.UserName + ' ' +
      oConfig.FTPServer.Password + ' "' +
      cRegKey + 'update' + '" "' + oConfig.CurDir + '" ' +
      oConfig.AppFileName + sGoing);

  CreateProcess(nil, CmdLine, nil, nil, False, NORMAL_PRIORITY_CLASS,
    nil, nil, si, pi);

  Application.Terminate;
end;

procedure TfrmLogin.txtUserIDKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_RETURN then
    txtPassword.SetFocus;
end;

procedure TfrmLogin.txtPasswordKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_RETURN then
    btnLogin.SetFocus;
end;

procedure TfrmLogin.FormShow(Sender: TObject);
begin
  FVersionList := TVersionList.Create;

  lblExp.Caption := NullString;

  txtUserID.Clear;
  txtPassword.Clear;

  txtUserID.SetFocus;

  Timer1.Enabled := True;
end;

//function TfrmLogin.GetUpdater: Boolean;
//var
//  oT: TadoQuery;
//  sFileName: string;
//begin
//  oT := TAdoQuery.Create(self);
//  oT.Connection := dbMain.adoUpdateDB;
//  oT.SQL.Text := QueryUpdater;
//  oT.Open;
//
//  sFileName := oConfig.CurDir + cUpdaterName;
//  TBlobField(oT.FieldByName('updater')).SaveToFile(sFileName);
//
//  if FileExists(sFileName) then
//    result := true
//  else
//    result := false;
//
//  oT.Close;
//  oT.Free;
//end;

procedure TfrmLogin.IdFTPAfterClientLogin(Sender: TObject);
var
  oStrings: TStringList;
begin
  oStrings := TStringList.Create;
  try
    IdFTP.List(oStrings, '', true);
    FVersionList.LoadFromStrings(oStrings, '');
    IdFTP.Tag := FTP_LOGIN_SUCCESS;
  except
    IdFTP.Tag := FTP_LOGIN_FAIL;
  end;
  oStrings.Free;
end;

procedure TfrmLogin.IdFTPWork(ASender: TObject; AWorkMode: TWorkMode;
  AWorkCount: Int64);
begin
  if ProgressBar.Visible then
    ProgressBar.Position := AWorkCount;
  Application.ProcessMessages;
end;

function TfrmLogin.isValidInput: Boolean;
begin
  result := oGlobal.isNotNullStr(txtUserID.Text) and oGlobal.isNotNullStr(txtPassword.Text);
end;

function TfrmLogin.LoadingConfiguration: Boolean;
var
  i: integer;
begin
  result := False;

  OutExp('Update 서버에 접속하고 있습니다...');
  if not SetFTPServer then
  begin
    oGlobal.Msg('Update 서버에 접근하지 못했습니다!');
    Exit;
  end;

  OutExp('업데이트 내역을 확인하고 있습니다...');
  if not DoUpdate then
    Exit;

  OutExp('사회사업실 DB에 접속하고 있습니다...');
  if not SetSocialWorkDB then
  begin
    oGlobal.Msg('SocialWorkDB 에 접근하지 못했습니다!');
    result := False;
    Exit;
  end;

  txtUserID.Text := oConfig.User.UserID;

  OutExp('기관정보를 가져오고 있습니다...');
  if not dbMain.GetHospitalList(cboHospitals.Properties.Items) then
  begin
    oGlobal.Msg('기관리스트를 가져오지 못했습니다!');
    result := False;
    Exit;
  end;

  i := cboHospitals.Properties.Items.IndexOf(oConfig.User.HospitalName);
  if i < 0 then
    cboHospitals.ItemIndex := 0
  else
    cboHospitals.ItemIndex := i;

  OutExp('');
  result := True;
end;

procedure TfrmLogin.OutExp(sMsg: string);
begin
  lblExp.Caption := sMsg;
  Application.ProcessMessages;
end;

function TfrmLogin.SetFTPServer: Boolean;
begin
  try
    IdFTP.Host := oConfig.FTPServer.Host;
    IdFTP.Port := cPORT;
    IdFTP.UserName := oConfig.FTPServer.UserName;
    IdFTP.Password := oConfig.FTPServer.Password;
    IdFTP.Connect;

    TimerEvent.Enabled := true;

    result := true;
  except
    result := False;
  end;
end;

function TfrmLogin.SetSocialWorkDB: Boolean;
var
  str: string;
begin
  str := Format(cDbConStr, [oConfig.SWServer.DataSource, oConfig.SWServer.DBName,
    oConfig.SwServer.UserID, oConfig.SWServer.Password]);

  try
    dbMain.adoSocialWorkDB.Connected := False;
    dbMain.adoSocialWorkDB.ConnectionString := str;
    dbMain.adoSocialWorkDB.Connected := True;

    result := True;
  except
    result := False;
  end;
end;

//function TfrmLogin.SetUpdateDB: Boolean;
//var
//  str: string;
//begin
//  str := Format(cDbConStr, [oConfig.UpdateServer.DataSource, oConfig.UpdateServer.DBName,
//    oConfig.UpdateServer.UserID, oConfig.UpdateServer.Password]);
//
//  try
//    dbMain.adoUpdateDB.Connected := False;
//    dbMain.adoUpdateDB.ConnectionString := str;
//    dbMain.adoUpdateDB.Connected := True;
//
//    result := True;
//  except
//    result := False;
//  end;
//end;

procedure TfrmLogin.Timer1Timer(Sender: TObject);
begin
  Timer1.Enabled := False;

  OutExp('설정을 로딩하고 있습니다...');

  while true do
  begin
    if LoadingConfiguration then
      break
    else
    begin
      if frmSetup.ShowModal <> mrOK then
      begin
        Application.Terminate;
        break;
      end;
    end;
  end;

  if trim(txtUserID.Text) <> NullString then
    txtPassword.SetFocus;
end;

procedure TfrmLogin.TimerEventTimer(Sender: TObject);
begin
  TimerEvent.Enabled := False;

  oGlobal.Msg('업데이트 서버 접속에 실패했습니다!');

  Application.Terminate;
end;

end.
