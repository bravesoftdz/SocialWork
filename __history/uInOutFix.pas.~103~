unit uInOutFix;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, cxGraphics, cxLookAndFeels, cxLookAndFeelPainters, Menus, StdCtrls,
  cxButtons, uGlobal, uConfig, uDB, cxControls, cxContainer, cxEdit,
  dxSkinsCore, dxSkinCaramel, cxStyles, dxSkinscxPC3Painter, cxCustomData,
  cxFilter, cxData, cxDataStorage, DB, cxDBData, cxLabel, cxCalendar,
  cxDBLookupComboBox, cxGridBandedTableView, cxGridLevel,
  cxGridDBBandedTableView, cxGridCustomTableView, cxGridTableView,
  cxGridDBTableView, cxClasses, cxGridCustomView, cxGrid, cxGroupBox, ADODB,
  ExtCtrls, dxGDIPlusClasses;

type
  TfrmInOutFix = class(TForm)
    adoInOut: TADOQuery;
    dsInOut: TDataSource;
    adoWardHistory: TADOQuery;
    dsWardHistory: TDataSource;
    cxGroupBox1: TcxGroupBox;
    cxGrid2: TcxGrid;
    cxGInOut: TcxGridDBTableView;
    cxGInOutInDate: TcxGridDBColumn;
    cxGInOutOutDate: TcxGridDBColumn;
    cxGInOutBohumName: TcxGridDBColumn;
    cxGInOutWorkerName: TcxGridDBColumn;
    cxGridDBBandedTableView1: TcxGridDBBandedTableView;
    cxGridDBTableView2: TcxGridDBTableView;
    cxGridLevel1: TcxGridLevel;
    cxGrid3: TcxGrid;
    cxGWardHistory: TcxGridDBTableView;
    cxGridDBColumn1: TcxGridDBColumn;
    cxGridDBColumn3: TcxGridDBColumn;
    cxGridDBBandedTableView2: TcxGridDBBandedTableView;
    cxGridDBTableView3: TcxGridDBTableView;
    cxGridLevel2: TcxGridLevel;
    adoWard: TADOQuery;
    dsWard: TDataSource;
    TimerShow: TTimer;
    cxGroupBox2: TcxGroupBox;
    cxGrid5: TcxGrid;
    cxGridDBTableView7: TcxGridDBTableView;
    cxGridDBBandedTableView5: TcxGridDBBandedTableView;
    cxGridDBTableView8: TcxGridDBTableView;
    cxGUpdate: TcxGridBandedTableView;
    cxGUpdateOldDate: TcxGridBandedColumn;
    cxGUpdateOldWard: TcxGridBandedColumn;
    cxGUpdateNewDate: TcxGridBandedColumn;
    cxGUpdateNewWard: TcxGridBandedColumn;
    cxGridLevel5: TcxGridLevel;
    btnSave: TcxButton;
    cxButton1: TcxButton;
    Panel4: TPanel;
    Panel1: TPanel;
    Image1: TImage;
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure FormShow(Sender: TObject);
    procedure TimerShowTimer(Sender: TObject);
    procedure btnSaveClick(Sender: TObject);
  private
    function GetHospitalID: integer;
    function isValidInput: Boolean;
    { Private declarations }
  public
    { Public declarations }
    InOutID: integer;
    oWardHistory: TADOQuery;
    property HospitalID: integer read GetHospitalID;
  end;

var
  frmInOutFix: TfrmInOutFix;

implementation

{$R *.dfm}

procedure TfrmInOutFix.btnSaveClick(Sender: TObject);
var
  nNewWardID: integer;
  sNewWardDate: string;
  oT: TADOQuery;
  nRow: integer;
begin
  if not isValidInput then
    Exit;

  if oGlobal.YesNo('통합되면 개인력, 사회조사기록지, 정신치료프로그램 등' + #13 +
     '관련정보도 같이 변경됩니다!' + #13 +
     '통합하시겠습니까?') <> mrYes then
    Exit;

  oT := TADOQuery.Create(self);
  oT.Connection := adoWardHistory.Connection;

  try
    adoWardHistory.Connection.BeginTrans;

    for nRow := 0 to cxGUpdate.DataController.RecordCount - 1 do
    begin
      sNewWardDate := cxGUpdate.DataController.GetValue(nRow, cxGUpdateNewDate.index);
      nNewWardID := strtoint(cxGUpdate.DataController.GetValue(nRow, cxGUpdateNewWard.index));

      if not dbMain.isExistWardHistory(InOutID, sNewWardDate) then
      begin
        adoWardHistory.Append;
        adoWardHistory.FieldByName('InOutID').AsInteger := InOutID;
        adoWardHistory.FieldByName('WardDate').AsString := sNewWardDate;
        adoWardHistory.FieldByName('WardID').AsInteger := nNewWardID;
        adoWardHistory.Post;
      end;

      oT.SQL.Text := 'UPDATE Intake'+
                     '   SET InOutID=' + inttostr(nNewInOutID) +
                     ' WHERE InOutID=' + 'a';


    end;


    adoWardHistory.Connection.CommitTrans;
  finally
    adoWardHistory.Connection.RollbackTrans;
  end;

  // 입원정보 통합

  // WardHistory 통합

  // intake 등 기록지 통합

  // 정신치료관리 통합


end;

procedure TfrmInOutFix.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_ESCAPE then Close;
end;

procedure TfrmInOutFix.FormShow(Sender: TObject);
begin
  TimerShow.Enabled := True;
end;

function TfrmInOutFix.GetHospitalID: integer;
begin
  result := oConfig.User.HospitalID;
end;

function TfrmInOutFix.isValidInput: Boolean;
var
  nRow, n: integer;
  sWardID: string;
  sWardDate: string;
  sInDate, sOutDate: string;

begin
  result := False;

  sInDate := adoInOut.FieldByName('InDate').AsString;
  sOutDate := adoInOut.FieldByName('OutDate').AsString;

  if oGlobal.isNullStr(sOutDate) then
    sOutDate := '9999-99-99';

  for nRow := 0 to cxGUpdate.DataController.RecordCount - 1 do
  begin
    if VarIsNull(cxGUpdate.DataController.GetValue(nRow, cxGUpdateNewWard.index)) then
      sWardID := ''
    else
      sWardID := cxGUpdate.DataController.GetValue(nRow, cxGUpdateNewWard.index);

    if VarIsNull(cxGUpdate.DataController.GetValue(nRow, cxGUpdateNewDate.Index)) then
      sWardDate := ''
    else
      sWardDate := cxGUpdate.DataController.GetValue(nRow, cxGUpdateNewDate.Index);

    if oGlobal.isNullStr(sWardID) then
    begin
      oGlobal.Msg('[ 변경적용일 ]을 입력해 주십시오!' );
      Exit;
    end;

    if  oGlobal.isNullStr(sWardDate) then
    begin
      oGlobal.Msg('[ 변경병동 ]을 입력해 주십시오!' );
      Exit;
    end;

    for n := 0 to cxGUpdate.DataController.RecordCount - 1 do
    begin
      if (n <> nRow) and
        (sWardDate = cxGUpdate.DataController.GetValue(n, cxGUpdateNewDate.Index)) then
      begin
        oGlobal.Msg('[ ' + sWardDate + ' ] 변경적용일이 중복되어 있습니다!');
        Exit;
      end;
    end;

    if sWardDate < sInDate then
    begin
      oGlobal.Msg('[ ' + sWardDate + ' ] 변경적용일이 입원일 이전 날짜입니다!');
      Exit;
    end;

    if sWardDate > sOutDate then
    begin
      oGlobal.Msg('[ ' + sWardDate + ' ] 변경적용일이 퇴원일 이후  날짜입니다!');
      Exit;
    end;

    if dbMain.isExistWardHistory(InOutID, sWardDate) and
      (not dbMain.isExistWardHistory(InOutID, sWardDate, sWardID)) then
    begin
      oGlobal.Msg('[' + sWardDate + ' ] 의 [ 변경병동 ]이 선택된 입원정보의 병동과 다릅니다!');
      Exit;
    end;
  end;

  result := True;
end;

procedure TfrmInOutFix.TimerShowTimer(Sender: TObject);
var
  nRow: integer;
  sWardDate, sWardName: string;
  nWardID: integer;
begin
  TimerShow.Enabled := False;

  adoWard.SQL.Text := 'SELECT *' +
                      '  FROM Wards' +
                      ' WHERE HospitalID=' + inttostr(HospitalID) +
                      ' ORDER BY SEQ';
  try
    adoWard.Open;
  except
    oGlobal.Msg('병동 정보에 접근할 수 없습니다!');
    ModalResult := mrClose;
    Exit;
  end;

  try
    adoInOut.SQL.Text := 'SELECT * FROM vInOut WHERE InOutID=' + inttostr(InOutID);
    adoInOut.Open;
  except
    oGlobal.Msg('입원정보에 접근할 수 없습니다!');
    ModalResult := mrClose;
    Exit;
  end;

  try
    adoWardHistory.SQL.Text := 'SELECT *' +
                               '       ,(select WardName from wards where WardID=WardHistory.WardID) as WardName' +
                               '  FROM WardHistory' +
                               ' WHERE InOutID=' + inttostr(InOutID);
    adoWardHistory.Open;
  except
    oGlobal.Msg('병동내역에 접근할 수 없습니다!');
    ModalResult := mrClose;
    Exit;
  end;

  cxGUpdate.DataController.RecordCount := oWardHistory.RecordCount;

  nRow := 0;
  oWardHistory.First;
  while not oWardHistory.Eof do
  begin
    sWardDate := oWardHistory.FieldByName('WardDate').AsString;
    nWardID := oWardHistory.FieldByName('WardID').AsInteger;
    sWardName := oWardHistory.FieldByName('WardName').AsString;


    cxGUpdate.DataController.SetValue(nRow, cxGUpdateOldDate.Index, sWardDate);
    cxGUpdate.DataController.SetValue(nRow, cxGUpdateOldWard.Index, sWardName);

    cxGUpdate.DataController.SetValue(nRow, cxGUpdateNewDate.Index, sWardDate);
    cxGUpdate.DataController.SetValue(nRow, cxGUpdateNewWard.Index, nWardID);

    nRow := nRow + 1;
    oWardHistory.Next;
  end;
end;

end.
